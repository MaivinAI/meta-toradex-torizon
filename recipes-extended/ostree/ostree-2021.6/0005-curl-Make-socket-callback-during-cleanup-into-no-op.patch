From 17390df7e5df467b4a97a848d1fff0514f23e2bf Mon Sep 17 00:00:00 2001
From: Eduardo Ferreira <eduardo.barbosa@toradex.com>
Date: Fri, 22 Nov 2024 10:00:34 -0300
Subject: [PATCH] curl: Make socket callback during cleanup into no-op

Because curl_multi_cleanup may invoke callbacks, we effectively have
some circular references going on here. See discussion in

https://github.com/curl/curl/issues/14860

Basically what we do is the socket callback libcurl may invoke into a no-op when
we detect we're finalizing. The data structures are owned by this object and
not by the callbacks, and will be destroyed below. Note that
e.g. g_hash_table_unref() may itself invoke callbacks, which is where
some data is cleaned up.

Upstream-Status: Backport [https://github.com/ostreedev/ostree/pull/3307/commits/4d755a85225ea0a02d4580d088bb8a97138cb040]

Signed-off-by: Colin Walters <walters@verbum.org>
Signed-off-by: Eduardo Ferreira <eduardo.barbosa@toradex.com>
---
 src/libostree/ostree-fetcher-curl.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/src/libostree/ostree-fetcher-curl.c b/src/libostree/ostree-fetcher-curl.c
index d6534b46..c07d0673 100644
--- a/src/libostree/ostree-fetcher-curl.c
+++ b/src/libostree/ostree-fetcher-curl.c
@@ -25,6 +25,7 @@
 #include <gio/gunixoutputstream.h>
 #include <glib-unix.h>
 #include <curl/curl.h>
+#include <stdbool.h>
 
 /* These macros came from 7.43.0, but we want to check
  * for versions a bit earlier than that (to work on CentOS 7),
@@ -79,6 +80,7 @@ struct OstreeFetcher
   struct curl_slist *extra_headers;
   int tmpdir_dfd;
   char *custom_user_agent;
+  bool finalizing; // Set if we're in the process of teardown
 
   GMainContext *mainctx;
   CURLM *multi;
@@ -177,6 +179,15 @@ _ostree_fetcher_finalize (GObject *object)
 {
   OstreeFetcher *self = OSTREE_FETCHER (object);
 
+  // Because curl_multi_cleanup may invoke callbacks, we effectively have
+  // some circular references going on here. See discussion in
+  // https://github.com/curl/curl/issues/14860
+  // Basically what we do is make most callbacks libcurl may invoke into no-ops when
+  // we detect we're finalizing. The data structures are owned by this object and
+  // not by the callbacks, and will be destroyed below. Note that
+  // e.g. g_hash_table_unref() may itself invoke callbacks, which is where
+  // some data is cleaned up.
+  self->finalizing = true;
   curl_multi_cleanup (self->multi);
   g_free (self->remote_name);
   g_free (self->tls_ca_db_path);
@@ -523,6 +534,10 @@ sock_cb (CURL *easy, curl_socket_t s, int what, void *cbp, void *sockp)
   OstreeFetcher *fetcher = cbp;
   SockInfo *fdp = (SockInfo*) sockp;
 
+  // We do nothing if we're in the process of teardown; see below.
+  if (fetcher->finalizing)
+    return 0;
+
   if (what == CURL_POLL_REMOVE)
     {
       if (!g_hash_table_remove (fetcher->sockets, fdp))
-- 
2.34.1

